### 方法，前缀和

**解题思路**

记数组的全部元素之和为 $\textit{total}$，当遍历到第 $i$ 个元素时，设其左侧元素之和为 $\textit{sum}$，则其右侧元素之和为 $\textit{total}-\textit{nums}_i-\textit{sum}$。左右侧元素相等即为 $\textit{sum}=\textit{total}-\textit{nums}_i-\textit{sum}$，即 $2\times\textit{sum}+\textit{nums}_i=\textit{total}$。

当中心下标左侧或右侧没有元素时，即为零个项相加，这在数学上称作「空和」（$\text{empty sum}$）。在程序设计中约定「空和是零」。

[参考](https://leetcode.cn/problems/find-the-middle-index-in-array/solution/zhao-dao-shu-zu-de-zhong-jian-wei-zhi-by-s8cy/)

### 代码

* []

```Java
class Solution {
    public int findMiddleIndex(int[] nums) {
        // int total = Arrays.stream(nums).sum();
        int total = 0;
        for (int num : nums) {
            total += num;
        }
        int sum = 0;
        for (int i = 0; i < nums.length; ++i) {
            if (2 * sum + nums[i] == total) {
                return i;
            }
            sum += nums[i];
        }
        return -1;
    }
}
```

**复杂度分析**

- 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。

- 空间复杂度：$O(1)$。

